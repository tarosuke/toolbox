#include <string.h>

#include <toolbox/matrix.h>



namespace TB{

	template<> void Matrix<4, 4, float>::Invert(){
		const float r(1.0/(
			m[0][3]*m[1][2]*m[2][1]*m[3][0] - m[0][2]*m[1][3]*m[2][1]*m[3][0] -
			m[0][3]*m[1][1]*m[2][2]*m[3][0] + m[0][1]*m[1][3]*m[2][2]*m[3][0]+
			m[0][2]*m[1][1]*m[2][3]*m[3][0] - m[0][1]*m[1][2]*m[2][3]*m[3][0] -
			m[0][3]*m[1][2]*m[2][0]*m[3][1] + m[0][2]*m[1][3]*m[2][0]*m[3][1]+
			m[0][3]*m[1][0]*m[2][2]*m[3][1] - m[0][0]*m[1][3]*m[2][2]*m[3][1] -
			m[0][2]*m[1][0]*m[2][3]*m[3][1] + m[0][0]*m[1][2]*m[2][3]*m[3][1]+
			m[0][3]*m[1][1]*m[2][0]*m[3][2] - m[0][1]*m[1][3]*m[2][0]*m[3][2] -
			m[0][3]*m[1][0]*m[2][1]*m[3][2] + m[0][0]*m[1][3]*m[2][1]*m[3][2]+
			m[0][1]*m[1][0]*m[2][3]*m[3][2] - m[0][0]*m[1][1]*m[2][3]*m[3][2] -
			m[0][2]*m[1][1]*m[2][0]*m[3][3] + m[0][1]*m[1][2]*m[2][0]*m[3][3]+
			m[0][2]*m[1][0]*m[2][1]*m[3][3] - m[0][0]*m[1][2]*m[2][1]*m[3][3] -
			m[0][1]*m[1][0]*m[2][2]*m[3][3] + m[0][0]*m[1][1]*m[2][2]*m[3][3]));

		const float n[16] = {
			r * (m[1][2]*m[2][3]*m[3][1] - m[1][3]*m[2][2]*m[3][1] +
				m[1][3]*m[2][1]*m[3][2] - m[1][1]*m[2][3]*m[3][2] -
				m[1][2]*m[2][1]*m[3][3] + m[1][1]*m[2][2]*m[3][3]),
			r * (m[0][3]*m[2][2]*m[3][1] - m[0][2]*m[2][3]*m[3][1] -
				m[0][3]*m[2][1]*m[3][2] + m[0][1]*m[2][3]*m[3][2] +
				m[0][2]*m[2][1]*m[3][3] - m[0][1]*m[2][2]*m[3][3]),
			r * (m[0][2]*m[1][3]*m[3][1] - m[0][3]*m[1][2]*m[3][1] +
				m[0][3]*m[1][1]*m[3][2] - m[0][1]*m[1][3]*m[3][2] -
				m[0][2]*m[1][1]*m[3][3] + m[0][1]*m[1][2]*m[3][3]),
			r * (m[0][3]*m[1][2]*m[2][1] - m[0][2]*m[1][3]*m[2][1] -
				m[0][3]*m[1][1]*m[2][2] + m[0][1]*m[1][3]*m[2][2] +
				m[0][2]*m[1][1]*m[2][3] - m[0][1]*m[1][2]*m[2][3]),
			r * (m[1][3]*m[2][2]*m[3][0] - m[1][2]*m[2][3]*m[3][0] -
				m[1][3]*m[2][0]*m[3][2] + m[1][0]*m[2][3]*m[3][2] +
				m[1][2]*m[2][0]*m[3][3] - m[1][0]*m[2][2]*m[3][3]),
			r * (m[0][2]*m[2][3]*m[3][0] - m[0][3]*m[2][2]*m[3][0] +
				m[0][3]*m[2][0]*m[3][2] - m[0][0]*m[2][3]*m[3][2] -
				m[0][2]*m[2][0]*m[3][3] + m[0][0]*m[2][2]*m[3][3]),
			r * (m[0][3]*m[1][2]*m[3][0] - m[0][2]*m[1][3]*m[3][0] -
				m[0][3]*m[1][0]*m[3][2] + m[0][0]*m[1][3]*m[3][2] +
				m[0][2]*m[1][0]*m[3][3] - m[0][0]*m[1][2]*m[3][3]),
			r * (m[0][2]*m[1][3]*m[2][0] - m[0][3]*m[1][2]*m[2][0] +
				m[0][3]*m[1][0]*m[2][2] - m[0][0]*m[1][3]*m[2][2] -
				m[0][2]*m[1][0]*m[2][3] + m[0][0]*m[1][2]*m[2][3]),
			r * (m[1][1]*m[2][3]*m[3][0] - m[1][3]*m[2][1]*m[3][0] +
				m[1][3]*m[2][0]*m[3][1] - m[1][0]*m[2][3]*m[3][1] -
				m[1][1]*m[2][0]*m[3][3] + m[1][0]*m[2][1]*m[3][3]),
			r * (m[0][3]*m[2][1]*m[3][0] - m[0][1]*m[2][3]*m[3][0] -
				m[0][3]*m[2][0]*m[3][1] + m[0][0]*m[2][3]*m[3][1] +
				m[0][1]*m[2][0]*m[3][3] - m[0][0]*m[2][1]*m[3][3]),
			r * (m[0][1]*m[1][3]*m[3][0] - m[0][3]*m[1][1]*m[3][0] +
				m[0][3]*m[1][0]*m[3][1] - m[0][0]*m[1][3]*m[3][1] -
				m[0][1]*m[1][0]*m[3][3] + m[0][0]*m[1][1]*m[3][3]),
			r * (m[0][3]*m[1][1]*m[2][0] - m[0][1]*m[1][3]*m[2][0] -
				m[0][3]*m[1][0]*m[2][1] + m[0][0]*m[1][3]*m[2][1] +
				m[0][1]*m[1][0]*m[2][3] - m[0][0]*m[1][1]*m[2][3]),
			r * (m[1][2]*m[2][1]*m[3][0] - m[1][1]*m[2][2]*m[3][0] -
				m[1][2]*m[2][0]*m[3][1] + m[1][0]*m[2][2]*m[3][1] +
				m[1][1]*m[2][0]*m[3][2] - m[1][0]*m[2][1]*m[3][2]),
			r * (m[0][1]*m[2][2]*m[3][0] - m[0][2]*m[2][1]*m[3][0] +
				m[0][2]*m[2][0]*m[3][1] - m[0][0]*m[2][2]*m[3][1] -
				m[0][1]*m[2][0]*m[3][2] + m[0][0]*m[2][1]*m[3][2]),
			r * (m[0][2]*m[1][1]*m[3][0] - m[0][1]*m[1][2]*m[3][0] -
				m[0][2]*m[1][0]*m[3][1] + m[0][0]*m[1][2]*m[3][1] +
				m[0][1]*m[1][0]*m[3][2] - m[0][0]*m[1][1]*m[3][2]),
			r * (m[0][1]*m[1][2]*m[2][0] - m[0][2]*m[1][1]*m[2][0] +
				m[0][2]*m[1][0]*m[2][1] - m[0][0]*m[1][2]*m[2][1] -
				m[0][1]*m[1][0]*m[2][2] + m[0][0]*m[1][1]*m[2][2]) };

		memcpy(m, n, sizeof(m));
	}

}
